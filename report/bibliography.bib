@InProceedings{Bognar2024,
  author     = {Marton Bognar and Cas Magnus and Frank Piessens and Jo Van Bulck},
  booktitle  = {33rd {USENIX} Security Symposium, {USENIX} Security 2024, Philadelphia, PA, USA, August 14-16, 2024},
  title      = {Intellectual Property Exposure: Subverting and Securing Intellectual Property Encapsulation in Texas Instruments Microcontrollers},
  editor     = {Davide Balzarotti and Wenyuan Xu},
  publisher  = {{USENIX} Association},
  url        = {https://www.usenix.org/conference/usenixsecurity24/presentation/bognar},
  bibsource  = {dblp computer science bibliography, https://dblp.org},
  biburl     = {https://dblp.org/rec/conf/uss/BognarMPB24.bib},
  file       = {:bognar24exposure.pdf:PDF},
  groups     = {Katamaran},
  readstatus = {read},
  year       = {2024},
}

@InProceedings{Huyghebaert2023,
  author     = {Sander Huyghebaert and Steven Keuchel and Coen De Roover and Dominique Devriese},
  booktitle  = {Proceedings of the 2023 {ACM} {SIGSAC} Conference on Computer and Communications Security, {CCS} 2023, Copenhagen, Denmark, November 26-30, 2023},
  title      = {Formalizing, Verifying and Applying {ISA} Security Guarantees as Universal Contracts},
  doi        = {10.1145/3576915.3616602},
  editor     = {Weizhi Meng and Christian Damsgaard Jensen and Cas Cremers and Engin Kirda},
  pages      = {2083--2097},
  publisher  = {{ACM}},
  bibsource  = {dblp computer science bibliography, https://dblp.org},
  biburl     = {https://dblp.org/rec/conf/ccs/HuyghebaertKRD23.bib},
  file       = {:uni/bibliography/Huyghebaert2023 - Formalizing, Verifying and Applying ISA Security Guarantees As Universal Contracts.pdf:PDF},
  groups     = {Katamaran},
  readstatus = {read},
  year       = {2023},
}

@Online{Armstrong,
  author  = {Alasdair Armstrong and Thomas Bauereiss and Brian Campbell and Shaked Flur and Kathryn E. Gray and Robert Norton-Wright and Christopher Pulte and Peter Sewell},
  title   = {The Sail instruction-set semantics specification language},
  url     = {https://alasdair.github.io/},
  urldate = {2025-05-10},
}

@Manual{Intel2025,
  author  = {{Intel Corporation}},
  date    = {2025},
  title   = {Intel 64 and IA-32 Architectures Software Developer’s Manual},
  url     = {https://cdrdv2.intel.com/v1/dl/getContent/671200},
  urldate = {2025-05-11},
}

@Manual{AMD2024,
  author  = {AMD},
  date    = {2024},
  title   = {AMD64 ArchitectureProgrammer’s Manual},
  url     = {https://docs.amd.com/v/u/en-US/40332_4.08},
  urldate = {2025-05-11},
}

@Manual{OPF2024,
  author   = {{OpenPOWER Foundation}},
  date     = {2024},
  title    = {Power Instruction Set Architecture},
  subtitle = {Version 3.1C},
  url      = {https://files.openpower.foundation/s/9izgC5Rogi5Ywmm/download/OPF_PowerISA_v3.1C.pdf},
  urldate  = {2025-05-11},
}

@Online{libreSOC,
  author  = {{libreSOC Project}},
  title   = {ISA Pseudo-code},
  url     = {https://libre-soc.org/openpower/isa/},
  urldate = {2025-05-11},
}

@InProceedings{Reid2016,
  author    = {Alastair Reid},
  booktitle = {2016 Formal Methods in Computer-Aided Design, {FMCAD} 2016, Mountain View, CA, USA, October 3-6, 2016},
  date      = {2016},
  title     = {Trustworthy specifications of ARM{\textregistered} v8-A and v8-M system level architecture},
  doi       = {10.1109/FMCAD.2016.7886675},
  editor    = {Ruzica Piskac and Muralidhar Talupur},
  pages     = {161--168},
  publisher = {{IEEE}},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/conf/fmcad/Reid16.bib},
  file      = {:Reid2016 - Trustworthy Specifications of ARM_ V8 a and V8 M System Level Architecture.pdf:PDF},
}

@Manual{Arm2020,
  author   = {{Arm Limited}},
  date     = {2020},
  title    = {Arm Architecture Reference Manual},
  subtitle = {Armv8, for Armv8-A architecture profile},
  url      = {https://developer.arm.com/documentation/ddi0487/fc/},
  urldate  = {2025-05-11},
}

@Misc{RVSail,
  author = {{RISC-V International}},
  title  = {Sail RISC-V model},
  url    = {https://github.com/riscv/sail-riscv},
}

@Online{ArmISA,
  author  = {{Arm Limited}},
  title   = {Glossary: Instruction Set Architecture (ISA)},
  url     = {https://www.arm.com/glossary/isa},
  urldate = {2025-05-11},
}

@Manual{slaa685,
  author  = {Texas Instruments},
  date    = {2015},
  title   = {MSP Code Protection Features},
  url     = {https://www.ti.com/lit/an/slaa685/slaa685.pdf},
  urldate = {2025-05-14},
  file    = {:slaa685.pdf:PDF},
}

@Manual{slas704g,
  author  = {{Texas Instruments}},
  date    = {2018},
  title   = {MSP430FR596x, MSP430FR594x Mixed-Signal Microcontrollers},
  url     = {https://www.ti.com/lit/gpn/msp430fr5969},
  urldate = {2025-05-14},
  file    = {:msp430fr5969.pdf:PDF},
}

@Manual{slau367p,
  author  = {{Texas Instruments}},
  date    = {2020},
  title   = {MSP430FR58xx, MSP430FR59xx, andMSP430FR6xx Family},
  url     = {https://www.ti.com/lit/slau367},
  urldate = {2025-05-14},
  file    = {:slau367p.pdf:PDF},
}

@MastersThesis{mspthesis,
  author      = {Aaron Bogaert},
  institution = {Vrije Universiteit Brussels},
  title       = {Creating a Sail Specification for the MSP430 ISA and Extending it with Sancus},
}

@Article{Armstrong2018,
  author = {A. Armstrong and Thomas Bauereiss and B. Campbell and Shaked Flur and Kathryn E. Gray and Prashanth Mundkur and Robert M. Norton and Christopher Pulte and A. Reid and Peter Sewell and I. Stark and Mark Wassell},
  date   = {2018},
  title  = {Detailed Models of Instruction Set Architectures: From Pseudocode to Formal Semantics},
  url    = {https://www.semanticscholar.org/paper/5c124b1c96803138ef9c9f00038955ab14e63522},
  file   = {:Armstrong2018 - Detailed Models of Instruction Set Architectures_ from Pseudocode to Formal Semantics.pdf:PDF:https\://www.cl.cam.ac.uk/~pes20/sail/2018-04-12-arw-paper.pdf},
}

@InProceedings{Bognar2025,
  author    = {Bognar, Marton and Van Bulck, Jo},
  booktitle = {10th {IEEE} European Symposium on Security and Privacy (EuroS{\&}P)},
  date      = {2025},
  title     = {{openIPE}: An Extensible Memory Isolation Framework for Microcontrollers},
}

@Article{Keuchel2022,
  author     = {Keuchel, Steven and Huyghebaert, Sander and Lukyanov, Georgy and Devriese, Dominique},
  date       = {2022-08-31},
  title      = {Verified symbolic execution with Kripke specification monads (and no meta-programming)},
  doi        = {10.1145/3547628},
  pages      = {194–224},
  url        = {https://doi.org/10.1145/3547628},
  abstract   = {Verifying soundness of symbolic execution-based program verifiers is a  
significant challenge. This is especially true if the resulting tool needs to be  
usable outside of the proof assistant, in which case we cannot rely on shallowly  
embedded assertion logics and meta-programming. The tool needs to manipulate  
deeply embedded assertions, and it is crucial for efficiency to eagerly prune  
unreachable paths and simplify intermediate assertions in a way that can be  
justified towards the soundness proof. Only a few such tools exist in the  
literature, and their soundness proofs are intricate and hard to generalize or  
reuse. We contribute a novel, systematic approach for the construction and  
soundness proof of such a symbolic execution-based verifier. We first implement  
a shallow verification condition generator as an object language interpreter in  
a specification monad, using an abstract interface featuring angelic and demonic  
nondeterminism. Next, we build a symbolic executor by implementing a similar  
interpreter, in a symbolic specification monad. This symbolic monad lives in a  
universe that is Kripke-indexed by variables in scope and a path condition.  
Finally, we reduce the soundness of the symbolic execution to the soundness of  
the shallow execution by relating both executors using a Kripke logical  
relation. We report on the practical application of these techniques in  
Katamaran, a tool for verifying security guarantees offered by instruction set  
architectures (ISAs). The tool is fully verified by combining our symbolic  
execution machinery with a soundness proof of the shallow verification  
conditions against an axiomatized separation logic, and an Iris-based  
implementation of the axioms, proven sound against the operational semantics.  
Based on our experience with Katamaran, we can report good results on  
practicality and efficiency of the tool, demonstrating practical viability of  
our symbolic execution approach.},
  booktitle  = {Proc. ACM Program. Lang.},
  day        = {31},
  file       = {:Keuchel2022 - Verified Symbolic Execution with Kripke Specification Monads (and No Meta Programming).pdf:PDF:https\://dl.acm.org/doi/pdf/10.1145/3547628},
  groups     = {Katamaran},
  keywords   = {logical relations, predicate transformers, program verification, refinement, separation logic, symbolic execution},
  location   = {New York, NY, USA},
  pagetotal  = {31},
  publisher  = {Association for Computing Machinery},
  readstatus = {skimmed},
}

@Manual{ChipsAlliance,
  author  = {{Chips Alliance}},
  title   = {RISC-V VeeR EL2 Programmer's Reference Manual},
  chapter = {21 Physical Memory Protection},
  url     = {https://chipsalliance.github.io/Cores-VeeR-EL2/html/main/docs_rendered/html/physical-memory-protection.html},
  urldate = {2025-06-09},
}

@Online{SGX,
  author  = {{Intel Corporation}},
  title   = {Intel Software Guard Extension},
  url     = {https://www.intel.com/content/www/us/en/products/docs/accelerator-engines/software-guard-extensions.html},
  urldate = {2025-06-09},
}

@Report{Watson2023,
  author      = {Robert N. M. Watson and Peter G. Neumann and Jonathan Woodruff and Michael Roe and Hesham Almatary and Jonathan Anderson and John Baldwin and Graeme Barnes and David Chisnall and Jessica Clarke and Brooks Davis and Lee Eisen and Nathaniel Wesley Filardo and Franz A. Fuchs and Richard Grisenthwaite and Alexandre Joannou and Ben Laurie and A. Theodore Markettos and Simon W. Moore and Steven J. Murdoch and Kyndylan Nienhuis and Robert Norton and Alexander Richardson and Peter Rugg and Peter Sewell and Stacey Son and Hongyan Xia},
  date        = {2023},
  institution = {University of Cambridge, Computer Laboratory},
  title       = {Capability Hardware Enhanced RISC Instructions: CHERI Instruction-Set Architecture (Version 9)},
  type        = {techreport},
  isrn        = {UCAM-CL-TR-987},
}

@Article{Fei2021,
  author       = {Fei, Shufan and Yan, Zheng and Ding, Wenxiu and Xie, Haomeng},
  date         = {2021-07},
  journaltitle = {ACM Comput. Surv.},
  title        = {Security Vulnerabilities of SGX and Countermeasures: A Survey},
  doi          = {10.1145/3456631},
  issn         = {0360-0300},
  number       = {6},
  url          = {https://doi.org/10.1145/3456631},
  volume       = {54},
  abstract     = {Trusted Execution Environments (TEEs) have been widely used in many security-critical applications. The popularity of TEEs derives from its high security and trustworthiness supported by secure hardware. Intel Software Guard Extensions (SGX) is one of the most representative TEEs that creates an isolated environment on an untrusted operating system, thus providing run-time protection for the execution of security-critical code and data. However, Intel SGX is far from the acme of perfection. It has become a target of various attacks due to its security vulnerabilities. Researchers and practitioners have paid attention to the security vulnerabilities of SGX and investigated optimization solutions in real applications. Unfortunately, existing literature lacks a thorough review of security vulnerabilities of SGX and their countermeasures. In this article, we fill this gap. Specifically, we propose two sets of criteria for estimating security risks of existing attacks and evaluating defense effects brought by attack countermeasures. Furthermore, we propose a taxonomy of SGX security vulnerabilities and shed light on corresponding attack vectors. After that, we review published attacks and existing countermeasures, as well as evaluate them by employing our proposed criteria. At last, on the strength of our survey, we propose some open challenges and future directions in the research of SGX security.},
  articleno    = {126},
  issue_date   = {July 2022},
  keywords     = {trustworthiness, side-channel attacks, security, Trusted execution environment},
  location     = {New York, NY, USA},
  numpages     = {36},
  publisher    = {Association for Computing Machinery},
}

@Manual{slaa628b,
  author  = {{Texas Instruments}},
  date    = {2014},
  title   = {MSP430 FRAM Technology – How To and Best Practices},
  url     = {https://www.ti.com/lit/pdf/SLAA628},
  urldate = {2025-06-10},
}

@InProceedings{Ge2018,
  author    = {Ge, Qian and Yarom, Yuval and Heiser, Gernot},
  booktitle = {Proceedings of the 9th Asia-Pacific Workshop on Systems},
  date      = {2018},
  title     = {No Security Without Time Protection: We Need a New Hardware-Software Contract},
  doi       = {10.1145/3265723.3265724},
  isbn      = {9781450360067},
  location  = {Jeju Island, Republic of Korea},
  publisher = {Association for Computing Machinery},
  series    = {APSys '18},
  url       = {https://doi.org/10.1145/3265723.3265724},
  abstract  = {The recent Spectre exploits demonstrated that covert timing channels are a mainstream security threat. Their prevention requires that operating systems provide time protection, in addition to the established memory protection. We propose OS mechanisms and designs which provide time protection, and define requirements on the hardware to enable them. We demonstrate that present mainstream processors do not meet these requirements, making them inherently insecure. We argue the need for a new security-oriented hardware-software contract, which we call the aISA as it augments the ISA, in order to enable time protection.},
  address   = {New York, NY, USA},
  articleno = {1},
  numpages  = {9},
}

@Comment{jabref-meta: databaseType:biblatex;}

@Comment{jabref-meta: fileDirectory:/home/ale/documenti/uni/magistrale/tesi/ref/pdfs;}
